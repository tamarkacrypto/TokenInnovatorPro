import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests

class TokenInnovatorPro:
    def __init__(self, api_url: str):
        self.api_url = api_url
        self.token_data = pd.DataFrame()

    def fetch_token_data(self, token_address: str) -> dict:
        """
        Fetch token data from the API.
        """
        url = f"{self.api_url}/token/{token_address}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"Error fetching token data: {response.status_code}")
            return {}

    def fetch_token_transactions(self, token_address: str) -> pd.DataFrame:
        """
        Fetch transaction data for a specific token.
        """
        url = f"{self.api_url}/token/{token_address}/transactions"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data['transactions'])
            return df
        else:
            print(f"Error fetching token transactions: {response.status_code}")
            return pd.DataFrame()

    def analyze_token_metrics(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Analyze token metrics such as trading volume and price trends.
        """
        df['price'] = df['price'].astype(float)
        df['volume'] = df['volume'].astype(float)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df.set_index('timestamp', inplace=True)
        
        metrics_data = df[['price', 'volume']].resample('D').agg({'price': 'mean', 'volume': 'sum'})
        return metrics_data

    def visualize_token_metrics(self, df: pd.DataFrame):
        """
        Visualize token metrics such as price and trading volume.
        """
        plt.figure(figsize=(14, 7))
        sns.lineplot(data=df, x=df.index, y='price', label='Price')
        plt.title('Token Price Trend')
        plt.xlabel('Date')
        plt.ylabel('Price')
        plt.legend()
        plt.grid(True)
        plt.show()

        plt.figure(figsize=(14, 7))
        sns.lineplot(data=df, x=df.index, y='volume', label='Trading Volume')
        plt.title('Token Trading Volume Trend')
        plt.xlabel('Date')
        plt.ylabel('Volume')
        plt.legend()
        plt.grid(True)
        plt.show()

# Example usage
if __name__ == "__main__":
    api_url = 'https://api.example.com/v1'
    token_address = '0x1234567890abcdef1234567890abcdef12345678'

    token_innovator_pro = TokenInnovatorPro(api_url)
    
    # Fetch token and transaction data
    token_data = token_innovator_pro.fetch_token_data(token_address)
    transaction_data = token_innovator_pro.fetch_token_transactions(token_address)
    
    # Analyze and visualize token metrics
    if not transaction_data.empty:
        metrics = token_innovator_pro.analyze_token_metrics(transaction_data)
        token_innovator_pro.visualize_token_metrics(metrics)
    
    print("Token Data:", token_data)
